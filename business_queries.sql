-- BUSINESS PROBLEMS
-- ADVANCED SQL ANALYSIS
/* 1. TOP SELLING PRODUCT
QUESRY : query to find the top 10 products by total sales value.
CHALLENGE :include product name, total quantity sold, and total sales value
*/
SELECT
    p.product_id,
    p.product_name,
    SUM(oi.quantity) AS total_quantity_sold,
    SUM(oi.quantity * oi.price_per_unit) AS total_sales_value
FROM
    order_items oi
JOIN
    products p ON oi.product_id = p.product_id
GROUP BY
    p.product_id, p.product_name
ORDER BY
    total_sales_value DESC
LIMIT 10;

-- ----------------------------------------------------------------------------------------
/*  
2. Revenue by Category  
Calculate total revenue generated by each product category.  
Challenge: Include the percentage contribution of each category to total revenue.  
*/  
WITH category_revenue AS (
    SELECT
        c.category_id,
        c.category_name,
        SUM(oi.quantity * oi.price_per_unit) AS category_sales
    FROM
        order_items oi
    JOIN
        products p ON oi.product_id = p.product_id
    JOIN
        category c ON p.category_id = c.category_id
    GROUP BY
        c.category_id, c.category_name
),
total_revenue AS (
    SELECT SUM(oi.quantity * oi.price_per_unit) AS total
    FROM order_items oi
)
SELECT
    cr.category_id,
    cr.category_name,
    cr.category_sales AS total_revenue_by_category,
    (cr.category_sales / tr.total) * 100 AS percentage_contribution
FROM
    category_revenue cr
CROSS JOIN
    total_revenue tr
ORDER BY
    total_revenue_by_category DESC;

-- ----------------------------------------------------------------------------------------
/*  
3. Average Order Value (AOV)  
Compute the average order value for each customer.  
Challenge: Include only customers with more than 5 orders.  
*/
WITH customer_orders AS (
    SELECT
        c.customer_id,
        CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
        COUNT(DISTINCT o.order_id) AS order_count,
        SUM(oi.quantity * oi.price_per_unit) AS total_spend
    FROM
        customers c
    JOIN
        orders o ON c.customer_id = o.customer_id
    JOIN
        order_items oi ON o.order_id = oi.order_id
    GROUP BY
        c.customer_id, c.first_name, c.last_name
    HAVING
        COUNT(DISTINCT o.order_id) > 5
)
SELECT
    customer_id,
    customer_name,
    order_count,
    total_spend,
    total_spend / order_count AS average_order_value
FROM
    customer_orders
ORDER BY
    average_order_value DESC;

-- ---------------------------------------------------------------------------------------
/*  
4. Monthly Sales Trend  
Query monthly total sales over the past year.  
Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale!  
*/
SELECT
    year,
    month,
    total_sale AS current_month_sale,
    LAG(total_sale, 1) OVER(ORDER BY year, month) AS last_month_sale
FROM (
    SELECT
        EXTRACT(MONTH FROM o.order_date) AS month,
        EXTRACT(YEAR FROM o.order_date) AS year,
        SUM(oi.quantity * oi.price_per_unit) AS total_sale
    FROM
        orders o
    JOIN
        order_items oi ON oi.order_id = o.order_id
    WHERE
        o.order_date >= CURRENT_DATE - INTERVAL '1 year'
    GROUP BY
        month,year
    ORDER BY
        year, month
) AS monthly_sales;

-- ---------------------------------------------------------------------------------------
/*  
5. Customers with No Purchases  
Find customers who have registered but never placed an order.  
Challenge: List customer details and the time since their registration.  
*/
-- using not in
SELECT *
FROM customers
WHERE customer_id NOT IN (SELECT
    DISTINCT customer_id
    FROM orders
    );
-- using left join
SELECT *
FROM customers as c
LEFT JOIN
orders as o
ON o.customer_id = c.customer_id
WHERE o.customer_id IS NULL;

-- -----------------------------------------------------------------------------------------
/*  
6. Best-Selling Categories by State  
Identify the best-selling product category for each state.  
Challenge: Include the total sales for that category within each state.  
*/
WITH state_category_sales AS (
    SELECT
        c.state,
        cat.category_name,
        SUM(oi.quantity * oi.price_per_unit) AS total_sales,
        RANK() OVER(PARTITION BY c.state ORDER BY SUM(oi.quantity * oi.price_per_unit) DESC) AS sales_rank
    FROM
        orders o
    JOIN
        customers c ON o.customer_id = c.customer_id
    JOIN
        order_items oi ON o.order_id = oi.order_id
    JOIN
        products p ON oi.product_id = p.product_id
    JOIN
        category cat ON p.category_id = cat.category_id
    GROUP BY
        c.state, cat.category_name
)
SELECT
    state,
    category_name AS best_selling_category,
    total_sales AS category_sales
FROM
    state_category_sales
WHERE
    sales_rank = 1
ORDER BY
    state;

-- ----------------------------------------------------------------------------------------
/*  
7. Customer Lifetime Value (CLTV)  
Calculate the total value of orders placed by each customer over their lifetime.  
Challenge: Rank customers based on their CLTV.  
*/  

SELECT  
    c.customer_id,  
    CONCAT(c.first_name, ' ', c.last_name) as full_name,  
    SUM(oi.quantity * oi.price_per_unit) as CLTV,  
    DENSE_RANK() OVER(ORDER BY SUM(oi.quantity * oi.price_per_unit) DESC) as customer_rank  
FROM orders as o  
JOIN customers as c ON c.customer_id = o.customer_id  
JOIN order_items as oi ON oi.order_id = o.order_id  
GROUP BY c.customer_id, c.first_name, c.last_name  
ORDER BY customer_rank;

-- -----------------------------------------------------------------------------------------
/*  
7. Customer Lifetime Value (CLTV)  
Calculate the total value of orders placed by each customer over their lifetime.  
Challenge: Rank customers based on their CLTV.  
*/  

SELECT  
    c.customer_id,  
    CONCAT(c.first_name, ' ', c.last_name) as full_name,  
    SUM(oi.quantity * oi.price_per_unit) as CLTV,  
    DENSE_RANK() OVER(ORDER BY SUM(oi.quantity * oi.price_per_unit) DESC) as customer_rank  
FROM orders as o  
JOIN customers as c ON c.customer_id = o.customer_id  
JOIN order_items as oi ON oi.order_id = o.order_id  
GROUP BY c.customer_id, c.first_name, c.last_name  
ORDER BY customer_rank;

-- ---------------------------------------------------------------------------------------
/*  
9. Shipping Delays  
Identify orders where the shipping date is later than 7 days after the order date.  
Challenge: Include customer, order details, and delivery provider.  
*/  

SELECT
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    o.order_id,
    o.order_date,
    s.shipping_date,
    s.shipping_providers AS delivery_provider,
    s.shipping_date - o.order_date AS days_to_ship,
    s.delivery_status
FROM
    orders o
JOIN
    customers c ON o.customer_id = c.customer_id
JOIN
    shippings s ON o.order_id = s.order_id
WHERE
    s.shipping_date > o.order_date + INTERVAL '7 days'
ORDER BY
    days_to_ship DESC;

-- --------------------------------------------------------------------------------------
/*  
10. Payment Success Rate  
Calculate the percentage of successful payments across all orders.  
Challenge: Include breakdowns by payment status (e.g., failed, pending).  
*/  
SELECT
    p.payment_status,
    COUNT(*) AS transaction_count,
    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM payments) AS percentage
FROM
    orders o
JOIN
    payments p ON o.order_id = p.order_id
GROUP BY
    p.payment_status
ORDER BY
    transaction_count DESC;

-- ---------------------------------------------------------------------------------------
/*  
11. Top Performing Sellers  
Find the top 5 sellers based on total sales value.  
Challenge: Include both successful and failed orders, and display their percentage of successful orders.  
*/  

WITH seller_performance AS (
    SELECT
        s.seller_id,
        s.seller_name,
        COUNT(DISTINCT o.order_id) AS total_orders,
        SUM(CASE WHEN o.order_status = 'Completed' THEN 1 ELSE 0 END) AS successful_orders,
		SUM(CASE WHEN o.order_status = 'Cancelled' THEN 1 ELSE 0 END) AS cancelled_orders,
        SUM(oi.quantity * oi.price_per_unit) AS total_sales_value
    FROM
        orders o
    JOIN
        sellers s ON o.seller_id = s.seller_id
    JOIN
        order_items oi ON o.order_id = oi.order_id
    GROUP BY
        s.seller_id, s.seller_name
)
SELECT
    seller_id,
    seller_name,
    total_sales_value,
    total_orders,
    successful_orders,
	cancelled_orders,
    (successful_orders * 100.0 / total_orders) AS success_rate_percentage
FROM
    seller_performance
ORDER BY
    total_sales_value DESC
LIMIT 5;

-- --------------------------------------------------------------------------------------
/*  
12. Product Profit Margin  
Calculate the profit margin for each product.  
Challenge: Rank products by their profit margin (highest to lowest).  
*/  

SELECT
    product_id,
    product_name,
    profit_margin,
    DENSE_RANK() OVER(ORDER BY profit_margin DESC) AS product_ranking
FROM (
    SELECT
        p.product_id,
        p.product_name,
        (SUM(oi.quantity * oi.price_per_unit) - SUM(p.cogs * oi.quantity)) / 
        SUM(oi.quantity * oi.price_per_unit) * 100 AS profit_margin
    FROM
        order_items oi
    JOIN
        products p ON oi.product_id = p.product_id
    GROUP BY
        p.product_id, p.product_name
) AS profit_calculation
ORDER BY
    product_ranking;

-- -------------------------------------------------------------------------------------
/*  
13. Most Returned Products  
Query the top 10 products by the number of returns.  
Challenge: Display the return rate as a percentage of total units sold for each product.  
*/  

SELECT
    p.product_id,
    p.product_name,
    COUNT(*) AS total_units_sold,
    SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) AS total_returns,
    SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS return_rate_percentage
FROM
    order_items oi
JOIN
    products p ON oi.product_id = p.product_id
JOIN
    orders o ON oi.order_id = o.order_id
GROUP BY
    p.product_id, p.product_name
ORDER BY
    total_returns DESC
LIMIT 10;

-- ------------------------------------------------------------------------------------------
/*  
14. Inactive Sellers  
Identify sellers who haven't made any sales in the last 6 months.  
Challenge: Show the last sale date and total sales from those sellers.  
*/  

WITH inactive_sellers AS (
    SELECT *
	FROM sellers
		WHERE seller_id NOT IN 
		(SELECT seller_id FROM orders WHERE order_date >= CURRENT_DATE - INTERVAL '6 month')
)
SELECT
    s.seller_id,
    s.seller_name,
    MAX(o.order_date) AS last_sale_date,
    COUNT(o.order_id) AS total_orders,
    SUM(oi.quantity * oi.price_per_unit) AS total_sales_value
FROM
    sellers s
JOIN
    orders o ON s.seller_id = o.seller_id
JOIN
    order_items oi ON o.order_id = oi.order_id
WHERE
    s.seller_id IN (SELECT seller_id FROM inactive_sellers)
GROUP BY
    s.seller_id, s.seller_name
ORDER BY
    last_sale_date;

-- ----------------------------------------------------------------------------------
/*  
15. IDENTITY customers into returning or new  
if the customer has done more than 2 returns categorize them as returning otherwise new  
Challenge: List customers id, name, total orders, total returns  
*/  

SELECT
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    COUNT(DISTINCT o.order_id) AS total_orders,
    SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) AS total_returns,
    CASE
        WHEN SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) > 2 
        THEN 'Returning'
        ELSE 'New'
    END AS customer_type
FROM
    customers c
JOIN
    orders o ON c.customer_id = o.customer_id
GROUP BY
    c.customer_id, c.first_name, c.last_name
ORDER BY
    total_returns DESC;
	
-- ---------------------------------------------------------------------------------------
/*  
16. Top 5 Customers by Orders in Each State  
Identify the top 5 customers with the highest number of orders for each state.  
Challenge: Include the number of orders and total sales for each customer.  
*/  

WITH ranked_customers AS (
    SELECT
        c.state,
        c.customer_id,
        CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
        COUNT(DISTINCT o.order_id) AS order_count,
        SUM(oi.quantity * oi.price_per_unit) AS total_spend,
        RANK() OVER(PARTITION BY c.state ORDER BY COUNT(DISTINCT o.order_id) DESC) AS state_rank
    FROM
        customers c
    JOIN
        orders o ON c.customer_id = o.customer_id
    JOIN
        order_items oi ON o.order_id = oi.order_id
    GROUP BY
        c.state, c.customer_id, c.first_name, c.last_name
)
SELECT
    state,
    customer_id,
    customer_name,
    order_count,
    ROUND(total_spend::numeric, 2) AS total_sales
FROM
    ranked_customers
WHERE
    state_rank <= 5
ORDER BY
    state, state_rank;

-- -----------------------------------------------------------------------------------------
/*  
17. Revenue by Shipping Provider  
Calculate the total revenue handled by each shipping provider.  
Challenge: Include the total number of orders handled and the average delivery time for each provider.  
*/  

SELECT
    s.shipping_providers AS provider_name,
    COUNT(DISTINCT o.order_id) AS total_orders,
    ROUND(SUM(oi.quantity * oi.price_per_unit)::numeric, 2) AS total_revenue,
    AVG(s.shipping_date - o.order_date) AS avg_delivery_days
FROM
    orders o
JOIN
    order_items oi ON o.order_id = oi.order_id
JOIN
    shippings s ON o.order_id = s.order_id
GROUP BY
    s.shipping_providers
ORDER BY
    total_revenue DESC;

-- ----------------------------------------------------------------------------------
/*
18. Top 10 product with highest decreasing revenue ratio compare to last year(2022) and current_year (2023)
Challenge: Return product_id, product_name, category_name, 2022 revenue and 2023 revenue decrease ratio at end Round the result
Note: Decrease ratio = (cr-ls)/ls*100 (cs = current_year ls=last_year)
*/
WITH last_year_sale AS (
    select
        p.product_id,
        p.product_name,
        c.category_name,
        SUM(oi.quantity*oi.price_per_unit) AS revenue
    FROM orders AS o
    JOIN order_items AS oi ON oi.order_id = o.order_id
    JOIN products AS p ON p.product_id = oi.product_id
    JOIN category AS c ON p.category_id = c.category_id
    WHERE EXTRACT(YEAR FROM o.order_date) = 2022
    GROUP BY p.product_id, p.product_name, c.category_name
),
current_year_sale AS (
    select
        p.product_id,
        SUM(oi.quantity*oi.price_per_unit) AS revenue
    FROM orders AS o
    JOIN order_items AS oi ON oi.order_id = o.order_id
    JOIN products AS p ON p.product_id = oi.product_id
    WHERE EXTRACT(YEAR FROM o.order_date) = 2023
    group by p.product_id
)
SELECT
    ls.product_id,
    ls.product_name,
    ls.category_name,
    ROUND(ls.revenue :: numeric, 2) AS "2022Revenue",
    ROUND(cs.revenue ::numeric, 2) AS "2023Revenue",
    ROUND((cs.revenue - ls.revenue)::numeric / NULLIF(ls.revenue, 0) ::numeric * 100, 2) AS decrease_ratio
FROM last_year_sale AS ls
JOIN current_year_sale AS cs ON ls.product_id = cs.product_id
WHERE ls.revenue > 0 AND cs.revenue < ls.revenue
ORDER BY decrease_ratio ASC
LIMIT 10;
-- -----------------------------------------------------------------------------------------